<style>
details > summary {
  cursor: pointer; padding: .5rem .8rem; border-radius: .5rem;
  background: #eee; font-weight: 600; display: inline-block;
}
details[open] > summary { background: #e3e3e3; }
</style>



# MOPT1 — Python · Computació (versió docent SMX)

> **Document original i de síntesi**, elaborat per a l’optativa *Robòtica i programació en Python* (SMX).  
> Basat en els temes tractats a “Python — Computació” (xtec.dev), llicència **CC BY‑NC‑ND 4.0**. Aquesta és **una re‑escriptura didàctica**, no una còpia ni adaptació literal.

---

## Objectius
- Entendre per què els ordinadors destaquen en el **càlcul numèric**.
- Utilitzar els **tipus numèrics** de Python (`int`, `float`) i els principals **operadors**.
- Declarar i usar **variables**, constants i **assignacions** “compostes” (`+=`, `-=`, …).
- Escriure **scripts** senzills (fitxers `.py`) amb `print()` i `input()`.
- Evitar **errors freqüents** (nom no definit, divisió per zero, barreges `str`/`int`, etc.).

## Índex
1. [Introducció](#introducció)  
2. [Entorn de treball](#entorn-de-treball)  
3. [Números: enters i reals](#números-enters-i-reals)  
4. [Variables, acumuladors i constants](#variables-acumuladors-i-constants)  
5. [Llegibilitat: espais i sagnat](#llegibilitat-espais-i-sagnat)  
6. [Text: `str`, cometes i línies múltiples](#text-str-cometes-i-línies-múltiples)  
7. [f-strings i format numèric](#f-strings-i-format-numèric)  
8. [De l’intèrpret a l’script](#de-lintèrpret-a-lscript)  
9. [Activitats ràpides](#activitats-ràpides)  
10. [Errors típics i com interpretar-los](#errors-típics-i-com-interpretar-los)  
11. [Crèdit i enllaços](#crèdit-i-enllaços)

---

## Introducció
Fa segles, “computer” era la persona que **computava**. Els ordinadors actuals automatitzen aquest càlcul i permeten programes que, per sota, fan **moltes operacions amb nombres**. En aquesta unitat consolidem la base numèrica de Python per poder avançar cap a **lògica, control del temps** i petites **simulacions** de robòtica.

## Números: enters i reals
**Tipus**:
- `int`: enters, sense part decimal — p. ex. `-3`, `0`, `42`.
- `float`: reals amb decimals — p. ex. `3.14`, `2.0`.

```python
type(2)     # <class 'int'>
type(2.0)   # <class 'float'>
type(2.)    # <class 'float'>
```

**Operadors**: `+`, `-`, `*`, `/`, `//`, `%`, `**` (potència).  
**Precedència**: `**` → `* / // %` → `+ -`. Usa parèntesis per deixar clar l’ordre.

```python
5 / 2      # 2.5 (float)
5 // 2     # 2   (part sencera)
5 % 2      # 1   (resta)
2 ** 4     # 16
(2 + 3) * 4  # 20
```

**Conversió i imprecisions**:
```python
int(3.9)     # 3  (talla)
float(5)     # 5.0
0.1 + 0.2    # 0.30000000000000004  (representació binària dels floats)
```

> Quan cal exactitud en **diners/mesures**, considera `decimal.Decimal` i format amb 2 decimals.

## Variables, acumuladors i constants
Una **variable** guarda un valor identificat per un **nom** vàlid (no pot començar per número).

```python
x = 6
x = x + 4      # 10
x += 3         # 13 (assignació composta)
```

**Acumulador**: patró per anar sumant/mesurant.
```python
total = 0.0
for nota in [6.5, 7.0, 5.25]:
    total += nota
mitjana = total / 3
```

**Constants**: estil en MAJÚSCULES per valors “fixos” al codi.
```python
PI = 3.141592653
radi = 8
area = PI * (radi ** 2)
```

> Python distingeix **majúscules/minúscules**: `pi` i `PI` són noms diferents.

## Llegibilitat: espais i sagnat
Python ignora **espais** entre operadors, però llegeix millor `2 + 4 + -5` que no pas variants compactes.  
El **sagnat** (espais al principi) és significatiu a les estructures de control; al REPL, una línia amb espais al principi pot provocar `IndentationError`.

## Text: `str`, cometes i línies múltiples
```python
type("hola")      # <class 'str'>
type("33")        # <class 'str'>
type('Hi!')       # cometes simples o dobles
"""Un
dos
tres"""           # literal multilínia; conté '\n'
```

Si el text conté apòstrof (`'`), és còmode usar cometes dobles: `"L'ombra..."`.

## f-strings i format numèric
Les **f-strings** incrusten expressions amb `{}`:
```python
nom, edat = "Laia", 21
f"Em dic {nom} i tinc {edat} anys."

a = 2/3
f"Amb dos decimals: {a:.2f}"   # -> 'Amb dos decimals: 0.67'
```

## De l’intèrpret a l’script
Un **script** (`.py`) és una seqüència de sentències guardades en fitxer.

`hello.py`:
```python
x = 45
x += 90
print(x)
```

Execució:
```python
python hello.py
# 135
```

Exemple amb entrada d’usuari (`input()`):
```python
# circle.py
radi = int(input("Radi? "))
PI = 3.141592653
area = PI * (radi ** 2)
print(f"Àrea amb radi {radi}: {area}")
```

> Recorda **desar** (`Ctrl + S`) abans d’executar.

## Activitats ràpides
1) Reescriu amb bona llegibilitat: `+4++6-+6+-10`  
   **Pista**: separa tokens amb espais.

2) f-string: amb `usuari = "Miquel"` i `lliure = 125.5999`, mostra  
   `L'usuari Miquel té 125.60 MB d'espai lliure` (arrodonit a 2 decimals).

3) Percentatges: amb `p = 0.8` i `n = 99`, mostra `El 80.0 % de 99 és 79.2` amb una sola línia `print(...)` i càlcul dins d’un f-string.

4) Scripts: amplia `circle.py` perquè imprimeixi **perímetre** i una línia final resum: `radi=X, àrea=..., perímetre=...`.

5) Converteix segons totals a `h:mm:ss` usant `//` i `%` (sense llibreries).

## Errors típics i com interpretar-los
- **NameError** — variable no definida. Defineix abans d’usar:
  ```python
  zeta = 5
  2 * zeta  # 10
  ```
- **SyntaxError** — números amb zero inicial (`03`) o cometes no tancades.
- **ZeroDivisionError** — divisió per zero (vigila parèntesis!).
- **TypeError** — barreges `str` i `int` en una suma:
  ```python
  x = "5"; y = 3
  int(x) + y  # 8
  ```

## Crèdit i enllaços
- “Python — Computació”, xtec.dev (consulta per a temari i exemples). Lloc amb llicència **CC BY‑NC‑ND 4.0**.  
- Aquest material ha estat **reescrit** per a ús educatiu dins l’aula SMX, evitant la còpia literal de textos i exercicis.

**Activitat**  
Escriu aquesta sentència de manera que es pugui entendre fàcilment: `+4++6-+6+-10`

<details>
  <summary>Mostra la solució</summary>

Solució (llegible):  
`+4 + +6 - +6 + -10`  
Opció equivalent més clara: `4 + 6 - 6 - 10`
</details>
