# Activitat 1: Desplega un servei web amb Docker

<hr>
<br>
<a href="https://github.com/jpardo20/apunts-jpardo20/blob/main/docs/moduls/0483-sistemes-informatics/files/activitat-per-seguir-la-teoria.md" target="_blank">Activitat a seguir</a>


---

## Objectius

- Entendre la diferència entre **imatge** i **contenidor**.  

- Executar un **servei web real** amb **Docker**.  

- Practicar la gestió de **ports** i **volums**.

- Aprendre a utilitzar **`docker-compose`** per automatitzar serveis.  

---

## Recordatori de conceptes

- Una **imatge** és una plantilla immutable (p. ex. `nginx:latest`).  

- Un **contenidor** és una instància viva d’aquesta imatge.  

- Els **volums** permeten guardar dades persistents.  

- Els **ports** permeten accedir al servei des de fora del contenidor.  

---

## Part 1 – Llançament d’un servidor web

1.1. Comprova que tens **`docker`** instal·lat i funcionant:

   ```bash
   docker -v
   ```

----

1.2. Comprova que tens **`docker compose`** instal·lat i funcionant:

   ```bash
   docker compose version
   ```

----

1.3. Comprova si tens algun contenidor corrent:

   ```bash
   docker container list
   ```
----

1.4. Si tens algun contenidor corrent atura'l:

   ```bash
   docker container stop <container ID>
   ```
----


Repeteix aquesta comanda, mentre apareguin contenidors corrent.

   ```bash
   docker container list
   ```

1.5. Comprova si tens algun contenidor aturat:

   ```bash
   docker container list -a
   ```
----

1.6. Si tens algun contenidor aturat esborra'l:

   ```bash
   docker container rm <container ID>
   ```
----

Repeteix aquesta comanda, mentre apareguin contenidors aturats:

   ```bash
   docker container list -a
   ```
----

1.7. Comprova si tens la imatge de **nginx** descarregada:

   ```bash
   docker image nginx
   ```
----

1.8. Descarrega la imatge de **nginx**:
   ```bash
   docker pull nginx
   ```
----

1.9. Executa-la exposant el **port `8080`**:
   ```bash
   docker run -d -p 8080:80 --name web1 nginx
   ```
----

1.10. Comprova el funcionament:  
   - Obre el navegador del teu equip i escriu:  
      `http://192.168.56.101:8080`  
   - Hauries de veure la pàgina per defecte de Nginx.

----

1.11. Mostra els contenidors actius:
   ```bash
   docker container list
   ```
----

1.12. Atura i elimina el contenidor:
   ```bash
   docker stop web1
   docker rm web1
   ```

---

## Part 2 – Afegir contingut personalitzat

2.1. Crea un directori de treball:
   ```bash
   mkdir -p ~/projectes/docker-nginx/html
   cd ~/projectes/docker-nginx
   ```

----

2.2. Crea una pàgina HTML pròpia:
   ```bash
   echo "<h1>Hola, sóc el servidor de <em>$(whoami)</em></h1>" > html/index.html
   ```

----


2.3. Executa Nginx amb un volum:
   ```bash
   docker run -d -p 8080:80    -v ~/projectes/docker-nginx/html:/usr/share/nginx/html    --name web2 nginx
   ```

----


2.4. Comprova al navegador:  
   `http://192.168.56.101:8080`  
   Ara hauries de veure la teva pròpia pàgina.

----


2.5. Mostra els contenidors actius:
   ```bash
   docker container list
   ```

----


2.6. Atura i elimina el contenidor:
   ```bash
   docker stop web2
   docker rm web2
   ```

---

## Part 3 – Introducció a docker-compose

3.1. Crea el fitxer `docker-compose.yml` dins `~/projectes/docker-nginx`:
   ```yaml
   version: "3.8"
   services:
     web:
       image: nginx
       ports:
         - "8080:80"
       volumes:
         - ./html:/usr/share/nginx/html
   ```

----

3.2. Llença el servei:
   ```bash
   docker compose up -d
   ```


----

3.3. Comprova el funcionament:
   ```bash
   docker ps
   ```


----

3.4. Obre el navegador:  
   `http://192.168.56.101:8080`  


----

3.5. Mostra els contenidors actius:
   ```bash
   docker container list
   ```


----

3.6. Atura i elimina els serveis:
   ```bash
   docker compose down
   ```


----

3.7. Mostra els contenidors actius:
   ```bash
   docker container list
   ```
---

## Part 4 – Traducció


Cal fer <a href="https://github.com/jpardo20/apunts-jpardo20/blob/main/docs/moduls/0483-sistemes-informatics/files/activitat-per-seguir-la-teoria.md#3-activitat-de-traducci%C3%B3-per-seguir-amb-la-teoria" target="_blank">3. Activitat de traducció per seguir 
amb la teoria</a>1

4.1. Edita el teu fitxer  ~/projectes/docker-nginx/getting-started-master/app/src/static/js/app.js` per fer les traduccions:

Cal que traduiu les següent cadenes:

**`New Item`** -> **`Nou element`**

**`No items yet! Add one above!`** -> **`Encara no hi ha articles! Afegeix-ne un a sobre!`**

**`Add Item`** -> **`Afegir element`**

----

Com ha de quedar

![alt text](image.png)

----

4.2. Quan funcioni, fes:
```bash
docker compose down
tar czf projecte_web.tar.gz ~/projectes/docker-nginx
python3 -m http.server 8000
```

Al PC (Windows):

Obre el navegador i ves a:
http://192.168.56.118:8000/


----

4.3. Prepara l’arxiu per entregar-lo l' aula virtual.

---

## Avaluació

| Criteri | Evidència | Pes |
|:--|:--|:--:|
| Execució correcta del contenidor `nginx` | Comprovació al navegador | 25% |
| Ús correcte de volums i ports | Comandes correctes | 25% |
| Configuració amb `docker-compose` funcional | Fitxer `docker-compose.yml` vàlid | 25% |
| Pàgina web personalitzada | Contingut visible i original | 25% |

---

**Mòdul:** 0483 – Sistemes informàtics  
**Resultat d’aprenentatge:** RA4 – Administra sistemes operatius multiusuari  
**Criteris d’avaluació:** CA4.d, CA4.e, CA4.f  
